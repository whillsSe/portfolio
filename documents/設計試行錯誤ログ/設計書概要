
[概要]
Todoとスケジュールを一括管理する「タスク管理アプリ」
タスクのタイプとして以下の3種類を定義する。
    ・'Schedule'
        スケジュール。達成対象外
    ・'Temporary'
        未達成のまま期限を超過すると、翌日以降表示しないTodo
    ・'Persistent'
        期限超過時も持ち越すTodo
タスクには、'One-off(単発)'と'Recurring(反復)'を設定可能。
つまりおおまかに計六種類のタスクを使い分けることになる。

以下の機能を実装する
・ユーザーの登録/ログイン/ログアウト
・タスクＣＲＵＤ
    a.タスクの取得
        ⅰ:当日実行可能なタスクの列挙
        ⅱ:カレンダー表示による、月別表示タスク(&予定)の一覧
    b.タスクの達成
    c.タスクの修正
    d.タスクの削除

[データモデル/クライアント]
Task:クライアントが取り扱うタスクのデータ概念
    id:uuid
    type:ENUM('SCHEDULE','TEMPORARY','PERSISTENT')
    start_date:Date:default=1980/01/01
    end_date:Date:default=9999/12/31
    start_time:option
    due_time:option
    recurring_rule:option/string?
    remaining:default=null
    completed_at:default=null

RecurringRule:繰り返しルール
    id:uuid
    value:RRuleStringとして記録。#'RRULE:FREQ=DAILY;COUNT=10'的なやつね

[構成]
・RDB
・バックエンドプログラム
・クライアントサイドプログラム
・(検討中)Redis

[決定事項]
    remainingの初期値:null


[処理フロー]
(代入してJSON化？)

    <当日タスク取得の場合>
        SCHEDULE
            One-off:start =< today =< end
            Recurring:RRule.before(todat,true) === today
        TEMPORARY
            One-off:start =< today =< today && (remaining === 0 || remaining === undefined)
            Recurring:RRule.before(todat,true) === today
        PERSISTENT
            One-off:start =< today && (remaining === 0 || remaining === undefined)
            Recurring:remaining + RRule.between(completed_at+1,today,true).length


    ※1:ここでの過剰な取得を避けるための条件付けが重要
    SCHEDULE.One-off:期間内
    SCHEDULE.Recurring:期間内
    TEMPORARY.One-off:期間内かつremaining != 0
    TEMPORARY.Recurring☆:期間内
    PERSISTENT.One-off:開始日以降かつremaining != 0
    PERSISTENT.Recurring☆:開始日以降

    ☆：クライアント側で残数計算。
        remaining != 0にしちゃうと、過去達成してremaining=0にしたものが取得対象外となる。
        日付かつremainig…をしないといけなくなる。

    ①ユーザー+日付情報から、※1のTaskを取得
    ②クライアント側で残タスク数の計算を行う
    ③残タスク数・タスク種を反映した表示を行う

[懸念事項]
RRuleStringと入力UIの連動
    入力⇒Stringはできる
    String⇒入力？？？
    RRuleオブジェクトのひな形

DBに問い合わせするシーン
初回(日付マタギ)
タスク新規登録/ルール変更などのsubmitを行った場合

(逆に)DBに問い合わせしないシーン
タスク単体の達成ボタン操作
アドレスバーは変わるけど送信しない画面戻り

    