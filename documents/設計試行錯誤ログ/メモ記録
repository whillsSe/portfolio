2023.09.13
    プロジェクト開始。案件に応募する際、このプロジェクトのURLを貼れるようにする事を目標とする。
    【イメージ】
        Todoアプリ
        ├Webアプリケーション(フロント↔バックエンド↔DB)
        └タスクの管理を目的とする
            ├タスクには「期日」や「重要度」を設定可能とし、表示する際の「優先順位」をフロントエンドで算出する
            ├スケジュール管理に近い側面を持たせたいが、あくまでタスク単位での管理とする事で直感的なUXを目指す
            └自分にとって使いやすいものを作る

    【ロードマップ】
        1.目的と要件の明確化
        2.技術スタックの選定
        3.開発環境のセットアップ
        4.データベース設計
        5.バックエンド開発
        6.フロントエンドの開発
        7.テスト
        8.デプロイ

<<目的と要件の明確化>>
    Todoアプリケーション
        閲覧時点で優先順位の高いものを積極的に表示する
        ユーザーに要求する操作は極力少なくしたい
        ごみ捨て、家賃支払いなど、定期的な繰り返しタスクの登録も行いたい
    
    要件の整理
    ・タスク
        やった/やってない評価をする、操作対象となるレコード
        期日、重要度、タグなどの設定が出来る
    
    ・スケジュール
        時間が決まっている予定⇒タスク化可能(病院：１２：００～、等)
        終日の予定⇒通知のみ

    ・繰り返しイベント
        ユーザー体験としては「タスクを発行するルールを設定する」に近い。
        ex:毎週日曜と水曜はゴミ出し、月の第３火曜日はペットボトルゴミ出し、等

    
    実装のイメージから逆算
        「当日実行可能なタスク」は、redisに持つ
        APIエンドポイントは、以下のように動作する
            ①Redisに'YYYY-MM-DD:<uuid>*'等をキーとする値があるか確認
            ⇒あれば値を返却
            ②１で値がない場合、RDBから実行可能タスクの取得、Redisへの反映を行う
            ③Redisの値を再度読み直し、結果をreturnする
        
        未来のタスク表示は？
            繰り返しルールと、期日付きタスクをクライアントサイドで取り扱う。
        
        繰り返し条件の変更・修正は？
            ルールテーブルを変更⇒Redis初期化メソッドをそのまま実行？
                ルール由来のタスクが既にテーブルに存在する場合、INSERTしない等の判定が必要になる
                使用中のルールの変更であれば、影響を受けるタスクを特定し再計算
                未使用のルールの変更・追記であれば、タスクを計算し追加する必要もあるかも

        当日に実行可能なタスク
            ⇒参照先：Redis
        
        スケジュール表示
            ⇒参照先：RDB.RecurringRules,RDB.Tasks

        タスクの追加
            追加したレコードにdueDateがある場合
            ⇒
        

        テーブル構造
            TaskTemplates (繰り返しタスクの設計図)
                id: ユニークID
                title: タスク名
                description: 説明
                user_id: ユーザーID
                repeat_until_done:未達成の場合に翌日以降通知するかどうか
                その他、タスク特有の属性

            RecurringRules
                id: ユニークID
                frequency: 'DAILY','WEEKLY','MONTHLY':typeにあたる
                day_of_week: 曜日指定
                day_of_month: 1~31,-1は月末指定
                week_of_month:1~5
                adjust_for_holidays:祝日時にずらす
                adjust_direction:祝日時にずらす方向(直前の平日/直後の平日)

            Tasks (実行タスク)
                id: ユニークID
                template_id: TaskTemplatesテーブルのID
                user_id: ユーザーID
                status: タスクの状態（例：未完了、完了）
                due_date:期日
                begin_date:通知開始日

            タスク問い合わせ
                ←Redisにレコード確認
                →None:
                    ←RedisのActive_Rules確認
                    →Active_Rules
                        ←RDB//Flask-SQLAlchemy
                            SELECT RDB.TaskTemplates
                            JOIN Task_Rules...
                            WHERE Task_Rules IN Active_Rules
                        →TaskTemplates

                        ←RDB
                            INSERT RDB.Tasks...
                        →null

                        ←RDB
                            SELECT RDB.Tasks
                            WHERE user_id = user_id
                            AND status = 0
                            AND (begin_date < TODAY OR due_date = TODAY)
                        →Tasks

                    ←RedisにINSERT
                    →null

                    ←Redisにレコード確認
                
                →Tasks
                    Tasksに優先順位を付加
                ←response

            タスクの追加
                ←RDB
                    INSERT RDB.Tasks
                →id
                ←Redis
                    INSERT
                →null
                ←Redis
                    SELECT *
                →Tasks

2023.09.14
単発タスク
繰り返しタスク(持ち越し無し)
繰り返しタスク(持ち越しあり)＝スタックする


[タスク発行ルール軸で考える]
単発タスクの場合
①completed_atが初期値
②start_dateがtoday以前(初期値：1980/01/01)
上記を満たしていれば無条件で実行可能タスクである

繰り返しタスクの場合
①start_dateがtoday以前
②end_dateがtodayより未来 //繰り返し期間の確認
    反例：end_dateがtoday以前でも、持ち越し可かつcompleted_atで未達分がある場合は要計上
③recurringRulesから、

2023.09.15
[達成記録をレコードにするアプローチ]
Tasks
    id:uuid
    title:string
    description:string(text)
    task_type:Enum('SCHEDULE','TODO_OPTIONAL','TODO_MANADATORY')
    is_recurring:Boolean=false
    start_date:タスクの実行期間開始日=1980/01/01
    end_date:タスクの実行期間最終日=9999/12/31
    (他タイムスタンプ)

TaskLogs
    id:number

    task_id:Tasks.id
    completed_at:最新のタスク達成日
    stack:繰り返しタスク積み上がり回数=0
    (他タイムスタンプ)

    (task_type)-(is_recurring?m(multi):s(single))
    0-s,0-m,1-s,1-m,2-s,2-m

タスク取得の流れ
if Tasks.start_date =< today 
    ? recs 0-s,0-m,1-s,1-m,2-s,2-m
        if rec.is_recurring
            ? 0-m,1-m,2-m 
                rec.id => RecurringRules
                if checkRecurring():Boolean
                    ? addTask()
                    if rec.task_type 
        



    task_type
        0:end_dateが今日以降であれば表示対象Task
        それ以外：以下の判定
            1:TaskLogsを取得し、

2023.09.19
task_type

2023.09.20
task_typeのパラメータ設定の試行錯誤を継続
1と2は相互に切り替え可能とするつもりなので、最大公約数的パラメータの持ち方をするべし
場合分けの考え方は、やはり六パターンで考えるべき
つまり
数字+r(remainingの意)で、各task_typeの単体・繰り返しパターンを表現
取得時
0:starts,ends
0r:starts,ends,recurs
1:starts,ends,status
1r:starts,ends,recurs,completes,remaining
2:starts,status
2r:starts,recurs,completes,remaining

取得時補足：
1r:completesはその日に達成完了していないかを確認する。remainingが≠0の時は、その日に取り消したと判定。
2r:completesの日～todayまでに発生する回数+remainingを回数として取得

recursの計算が煩雑ではないか？という懸念
user_idとstartsからtaskの列挙を取得
task_type=0⇒starts&&endsで表示
task_type=1→starts&&endsに加え
    is_recurring:recurring_rulesを参照・取得
    単体：


完了時
1:status更新
1r:INSERT(id,completes,remaining)
2:status更新
2r:INSERT(id,completes,remaining)

完了解除
1:status更新
1r:UPDATE(remaining)/最新レコードのremainigをupdate
2:status更新
2r:UPDATE(remaining)/最新レコードのremainigをupdate

1と2の相互乗り換えはこれで対応できるかも。
ただ、1と1r、2と2rの相互乗り換えを考えるとき
単体の間:Log更新されず
繰り返しの間:status更新されず
で棲み分けできてるけど、remainingやstatusの変更処理が面倒くさいので、不可とする?

単体タスクの完了時処理について
INSERT(id,completes,remaining)を適用したい
completes=0で、remaining>0の場合、
・今日達成したタスクを取り消した可能性
・以前繰り返しだった時代のremainingが残っていた場合、なんど実行しても積み残しタスクとして表示されてしまう
→仮に繰り返し↔単体の切り替えを可能にする場合、切り替え時にremainingを0(or1)にしてあげる必要がありそう
繰り返し↔単体の切り替えは原則不可とする！

[statusがない場合]
TaskLogsにレコードがないorレコードのremainingが1である場合は未達成、なんて処理になる。

カレンダー表示を考えた時、冗長な設計になる事に気づいたので、ここにきて大幅に設計変更を行う。
・TaskRuleをクライアントに送信・計算させる方針で一本化
・単体タスクも繰り返しタスクも、同じテーブル構造を取るようにする
・Redisの採用は未確定。クライアント↔バックエンドのやりとりの仕方を再度整理

15:52
    繰り返しルールに関して、RFC5545なる規定があるあしいので解析する
    https://datatracker.ietf.org/doc/html/rfc5545

2023.09.21
書き散らしコピペ
DBから取得する場合
        SCHEDULE,TEMPORARY:start =< today =< end であるもの全て
        PERSISTENT:start =< today であるもの
        'SELECT * FROM tasks t WHERE user_id = ? AND start_date =< ? AND ((end_date => ? AND type != 2) OR type = 2);'
        で取得⇒JSON化
        ここには完了済みの繰り返しタスクが含まれる可能性がある。

        クライアントサイドでは
            data = json.parse();//おそらくtaskレコードの列挙になってる
            let tasks = new List<Task>[];
            for(let task of data){ 
                switch(task.type){
                    case 0:
                        if(!task.recurring_rule){
                            tasks.append(task);
                        }else{
                            let rrule = new RRule({
                                dtstart:task.start_date,
                                until:task.end_date,
                                rruleString:task.recurring_rule
                            })
                            if(rrule.before(new Date(),true)){
                                task.rrule = rrule;#taskオブジェクトの中にrruleを含めてしまった方が良さそうじゃない？
                                tasks.append(task);
                            }
                        }
                        break;
                    case 1:
                        if(!task.recurring_rule){
                            task.append(task);
                        }else{
                            let rrule = new RRule({
                                #省略
                            })
                        }
                        break;
                    case 2:
                        if(!task.recurring_rule){
                            if(task.completed_at === undefined || task.remaining === 0){
                                tasks.append(task);
                            }
                            
                        }else{
                            let rrule = new RRule({
                                dtstart:start_date,
                                until:end_date,
                                rruleString:task.recurring_rule
                            })
                            #conpleted_at+1~todayまでのbefore迄の回数+remainingをtask残り回数としてオブジェクト化
                        }
                        break;
                }
            }
        みたいなコードを書くんだろう

        jsonで送られてくる"型"
        クライアントサイドで扱う"型"の区別が必要？

2023.09.22
達成処理:
        completed_at = today
        remaining = (クライアントタスクオブジェクトのremain値) -1
        にUPDATE

    取り消し処理:
        remaining = (テーブル上remaining値) +1
        TEMPORARYであれば、remainingの数は無関係/PERSISTENTなら、残数が増える


    remainingの初期値について
        初期値=1:繰り返しタスクの計算時、completed_atから意味を判断し分けないといけない
        初期値=-1:繰り返しタスクの計算時、-1を0と読み替えたうえでRRule.between.lengthしないといけない
        ⇒初期値はnull値(undeifned)とするのが正解？INDEXにさえしなければ良い(はず)

2023.09.26
figmaにてワイヤーフレーム作成。
https://www.figma.com/file/wdYByQQnoMZNTtRUeDaILH/Portfolio?type=design&t=jTJY4tnjoYr1ev8s-6

2023.09.27
[Reactコンポーネント構造]:<Component>
<App>
├Router
    ├<Navigation>
    └Switch
        └Route…(パス毎に分岐)
            ├<ContentArea>
            │   ├/home
            │   ├/calendar
            │   ├/view-tasks
            │   └/profile
            └<SideWindow>
                ├/task/create
                ├/task/:taskId
                └/task/:taskId/edit
            
2023.09.28
PythonのSQLAlchemyのmodel。authとapiで必要なオブジェクトちゃうかったわ。
dev/auth/tascal/tascal_auth/models.py
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy_utils import UUIDType
db = SQLAlchemy()


class Authentication(db.Model):
    __tablename__ = 'authentication'
    id = db.Column(UUIDType(binary=False), primary_key=True)
    email = db.Column(db.String(255), nullable=False, unique=True)
    password = db.Column(db.String(255), nullable=False)
    created_at = db.Column(db.DateTime, nullable=False, default=db.func.current_timestamp())
    updated_at = db.Column(db.DateTime, nullable=False, default=db.func.current_timestamp(), onupdate=db.func.current_timestamp())

class RefreshToken(db.Model):
    __tablename__ = 'refresh_tokens'
    refresh_token = db.Column(db.String(255), primary_key=True)
    user = db.Column(UUIDType(binary=False), nullable=False)
    is_invalidated = db.Column(db.String(255), nullable=False)
    expiration_time = db.Column(db.DateTime, nullable=False)
    created_at = db.Column(db.DateTime, nullable=False, default=db.func.current_timestamp())
    updated_at = db.Column(db.DateTime, nullable=False, default=db.func.current_timestamp(), onupdate=db.func.current_timestamp())

class Tag(db.Model):
    __tablename__ = 'tags'
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    tag = db.Column(db.String(255), nullable=False, unique=True)
    created_at = db.Column(db.DateTime, nullable=False, default=db.func.current_timestamp())
    updated_at = db.Column(db.DateTime, nullable=False, default=db.func.current_timestamp(), onupdate=db.func.current_timestamp())

class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(UUIDType(binary=False), db.ForeignKey('authentication.id'), primary_key=True)
    username = db.Column(db.String(255), nullable=False, unique=True)
    profilename = db.Column(db.String(255), nullable=False, default='')
    created_at = db.Column(db.DateTime, nullable=False, default=db.func.current_timestamp())
    updated_at = db.Column(db.DateTime, nullable=False, default=db.func.current_timestamp(), onupdate=db.func.current_timestamp())

class Task(db.Model):
    __tablename__ = 'tasks'
    id = db.Column(UUIDType(binary=False), primary_key=True)
    author = db.Column(UUIDType(binary=False), db.ForeignKey('users.id'), nullable=False)
    title = db.Column(db.String(255), nullable=False)
    type = db.Column(db.Integer, nullable=False)
    rrule_string = db.Column(db.String(255), nullable=False, default='')
    start_date = db.Column(db.Date, nullable=False, default='1980-01-01')
    end_date = db.Column(db.Date, nullable=False, default='9999-12-31')
    start_time = db.Column(db.Time, nullable=True)
    due_time = db.Column(db.Time, nullable=True)
    completed_at = db.Column(db.DateTime, nullable=False,default=db.func.current_timestamp())
    remaining = db.Column(db.Integer, nullable=False, default=1)
    created_at = db.Column(db.DateTime, nullable=False, default=db.func.current_timestamp())
    updated_at = db.Column(db.DateTime, nullable=False, default=db.func.current_timestamp(), onupdate=db.func.current_timestamp())

task_tag = db.Table('task_tag',db.Column('tag_id',db.Integer,db.ForeignKey('tags.id'),nullable=False,primary_key=True),db.Column('task_id',UUIDType(binary=False),db.ForeignKey('tasks.id',ondelete='CASCADE'),nullable=False,primary_key=True))

# Add foreign key relationships
User.authentication = db.relationship('Authentication', back_populates='users', uselist=False)
Task.user = db.relationship('User', back_populates='tasks')
