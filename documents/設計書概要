
[概要]
Todoとスケジュールを一括管理する「タスク管理アプリ」
タスクのタイプとして以下の3種類を定義する。
    ・'Schedule'
        スケジュール。達成対象外
    ・'Temporary'
        未達成のまま期限を超過すると、翌日以降表示しないTodo
    ・'Persistent'
        期限超過時も持ち越すTodo
タスクには、'One-off(単発)'と'Recurring(反復)'を設定可能。
つまりおおまかに計六種類のタスクを使い分けることになる。

以下の機能を実装する
・ユーザーの登録/ログイン/ログアウト
・タスクＣＲＵＤ
    a.タスクの取得
        ⅰ:当日実行可能なタスクの列挙
        ⅱ:カレンダー表示による、月別表示タスク(&予定)の一覧
    b.タスクの達成
    c.タスクの修正
    d.タスクの削除

[データモデル/クライアント]
Task:クライアントが取り扱うタスクのデータ概念
    id:uuid
    type:ENUM('SCHEDULE','TEMPORARY','PERSISTENT')
    start_date:
    end_date:
    due_time:option
    recurring_rule:option/string?
    remaining:
    completed_at:

RecurringRule:繰り返しルール
    id:uuid
    value:RRuleStringとして記録。#'RRULE:FREQ=DAILY;COUNT=10'的なやつね

[構成]
・RDB
・バックエンドプログラム
・クライアントサイドプログラム
・(検討中)Redis

[処理フロー]
(代入してJSON化？)

    <当日タスク取得の場合>
        SCHEDULE
            One-off:start =< today =< end
            Recurring:RRule.before(todat,true) === today
        TEMPORARY
            One-off:start =< today =< today && (remaining === 0 || remaining === undefined)
            Recurring:RRule.before(todat,true) === today
        PERSISTENT
            One-off:start =< today && (remaining === 0 || remaining === undefined)
            Recurring:remaining + RRule.between(completed_at+1,today,true).length
    
    流れとしては、ざっくりDBから取得
    ⇒   Calendar:そのままTaskに
        その他:
        ⇒Recurring判定:
        type=2:
        type=3:Completed_atからtodayまでに発生したタスクの回数+remainingをnとする

※1:ここでの過剰な取得を避けるため、期間及び必要性を全うしたTaskには、Statusを付与し取得対象外とする必要がありそう。